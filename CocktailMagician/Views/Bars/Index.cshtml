@model IEnumerable<Bar>
@{
    ViewData["Title"] = "Bars";
}
<div class="container">
    <h1>Bars</h1>
    <div class="container">
        @Html.ActionLink("New Bar", "Create", "Bars", null, new { @class = "btn btn-primary" })
        @Html.ActionLink("Search", "Search", "Bars", null, new { @class = "btn btn-primary" })
    </div>
</div>

<br>
@if (!Model.Any())
{
    <p>We don't have any bars yet.</p>
}

<div class="row">
    @foreach (var bar in Model)
    {
        @*<div class="partialViewWrapper">*@
        @*<div class="bar-container" id="@bar.Id" rating="@bar.Rating">*@
        <partial name="_BarPartial" model="@bar" />

        @*</div>*@
    }
    <partial name="_Pagination" />
</div>

<br />
</div>
<script>

    const bars = $('.bar-container');
    foreach(bar in bars);
    {
        const starsTotal = 5;

        const barId = bar.attr('id');
        const barRating = bar.attr('rating');

        const starPercentage = (barRating / starsTotal) * 100;
        //round to nearest 10
        const starPercentageRounded = `${Math.round(starPercentage / 10) * 10}%`;

        document.querySelector(` .stars-inner`).style.width = starPercentageRounded // the stuff you calculated

    }
</script>



@*-- partial
    <div>
        <div class="bar-container" id="@Model.id" raiting="@Model.raiting">
        </div>
    </div>

    <script>
        const bars = $(.bar - container`);
        foreach (bar in bars) {
            const barId = bar.attr('id');
            const barRaiting = bar.attr('raiting'); //maybe it should have val() ?
            ... calcution
            const classToAjustWidth = $(`${ barId }.star - rating`).width = // the stuff you calculated
        }*@






